package com.nhom6.server.Services;

import com.nhom6.server.DTO.SubmitExamRequest;
import com.nhom6.server.Model.ChiTietBaiThi;
import com.nhom6.server.Model.Exam;
import com.nhom6.server.Model.Result;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
public class ResultService {
    @Autowired
    private JdbcTemplate jdbcTemplate;
    @Autowired
    private ChiTietBaiThiService chiTietBaiThiService;
    @Autowired
    private  ExamService examService;

    public List<Result> getAllResults() {
        String sql = "SELECT * FROM ketqua";
        return jdbcTemplate.query(sql, new BeanPropertyRowMapper<>(Result.class));
    }

    public List<Result> getResultById(String maKiThi) {
        String sql = "SELECT * FROM ketqua WHERE maKiThi = ?";
        return jdbcTemplate.query(sql, new Object[]{maKiThi}, new BeanPropertyRowMapper<>(Result.class));
    }

//    public Exam getExamById(String maKiThi) {
//        String sql = "SELECT * FROM kithi WHERE maKiThi = ?";
//        return jdbcTemplate.queryForObject(sql, new Object[]{maKiThi}, new BeanPropertyRowMapper<>(Exam.class));
//    }

    private String generateNextMaKetQua() {
        String sql = "SELECT TOP 1 maketqua FROM ketqua ORDER BY maketqua DESC";
        String lastMaKetQua = jdbcTemplate.queryForObject(sql, String.class);
        if (lastMaKetQua == null || lastMaKetQua.isEmpty()) {
            return "0000000001"; // N·∫øu ch∆∞a c√≥ m√£ n√†o, b·∫Øt ƒë·∫ßu t·ª´ 0000000001
        }
        // Chuy·ªÉn m√£ cu·ªëi th√†nh s·ªë r·ªìi tƒÉng l√™n
        long number = Long.parseLong(lastMaKetQua);
        number++;
        // Format l·∫°i th√†nh chu·ªói s·ªë 10 k√Ω t·ª±
        return String.format("%010d", number);
    }

    // L∆∞u k·∫øt qu·∫£ b√†i thi m·ªõi
    public String createResult(String maKiThi, String id) {
        String maKetQua = generateNextMaKetQua(); // T·∫°o m√£ k·∫øt qu·∫£
        String sql = """
            INSERT INTO ketqua (maketqua, makithi, id, diem, thoigianvaothi, thoigianlambai, socaudung)
            VALUES (?, ?, ?, null, GETDATE(), null, null)
        """;
        jdbcTemplate.update(sql, maKetQua, maKiThi, id);
        return maKetQua;
    }

    // Ki·ªÉm tra xem sinh vi√™n ƒë√£ c√≥ k·∫øt qu·∫£ ch∆∞a
    public Result checkKetQua(String maKiThi, String id) {
        String sql = "SELECT * FROM ketqua WHERE maKiThi = ? AND id = ?";
        try {
            List<Result> results = jdbcTemplate.query(sql, new Object[]{maKiThi, id}, new BeanPropertyRowMapper<>(Result.class));
            return results.isEmpty() ? null : results.get(0);
        } catch (Exception e) {
            return null;
        }
    }

    public List<ChiTietBaiThi> createExamResult(String maKiThi, String id) {
        // üîç Ki·ªÉm tra k·ª≥ thi c√≥ t·ªìn t·∫°i kh√¥ng
        Exam kiThi = examService.getExamByMa(maKiThi);

        // üîç Ki·ªÉm tra xem sinh vi√™n ƒë√£ c√≥ k·∫øt qu·∫£ thi ch∆∞a
        Result existingKetQua = this.checkKetQua(kiThi.getMaKiThi(), id);

        // N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi
        String maKetQua = existingKetQua == null ? this.createResult(maKiThi, id) : existingKetQua.getMaKetQua();
        List<String> existingCauHoiIds = chiTietBaiThiService.checkCauHoi(maKetQua);
        List<Map<String, Object>> cauHoiList;

        if (!existingCauHoiIds.isEmpty()) {
            // N·∫øu ƒë√£ c√≥, l·∫•y l·∫°i t·ª´ b·∫£ng `cauhoi`
            String placeholders = String.join(",", Collections.nCopies(existingCauHoiIds.size(), "?"));
            String selectCauHoiSql = "SELECT * FROM cauhoi WHERE maCauHoi IN (" + placeholders + ")";
            cauHoiList = jdbcTemplate.queryForList(selectCauHoiSql, existingCauHoiIds.toArray());
        } else {
            // N·∫øu ch∆∞a c√≥, l·∫•y ng·∫´u nhi√™n theo m√¥n h·ªçc
            cauHoiList = chiTietBaiThiService.randomCauHoi(maKetQua, kiThi.getMaMonHoc(), kiThi.getSoCau());
        }
        return chiTietBaiThiService.getCauHoi(cauHoiList);
    }

    public void submitExam(SubmitExamRequest request) {
        // Ki·ªÉm tra ho·∫∑c t·∫°o k·∫øt qu·∫£ m·ªõi
        Result result = checkKetQua(request.getMaKiThi(), request.getId());
        if (result == null) {
            throw new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ thi.");
        }

        Exam exam = examService.getExamByMa(request.getMaKiThi());
        int correctCount = 0;

        for (Map.Entry<String, String> entry : request.getAnswers().entrySet()) {
            String maCauHoi = entry.getKey();
            String dapAnChon = entry.getValue();

            // N·∫øu dapAnChon null, b·ªè qua (t·ª©c l√† kh√¥ng ch·ªçn c√¢u n√†o)
            if (dapAnChon == null || dapAnChon.isEmpty()) continue;

            // Ki·ªÉm tra xem ƒë√£ c√≥ d√≤ng n√†o trong chitietde ch∆∞a, n·∫øu ch∆∞a th√¨ INSERT tr∆∞·ªõc
            String insertQuery = "MERGE INTO chitietde AS target " +
                    "USING (SELECT ? AS maketqua, ? AS macauhoi, ? AS dapanchon) AS source " +
                    "ON target.maketqua = source.maketqua AND target.macauhoi = source.macauhoi " +
                    "WHEN MATCHED THEN UPDATE SET target.dapanchon = source.dapanchon " +
                    "WHEN NOT MATCHED THEN INSERT (maketqua, macauhoi, dapanchon) VALUES (source.maketqua, source.macauhoi, source.dapanchon);";
            jdbcTemplate.update(insertQuery, result.getMaKetQua(), maCauHoi, dapAnChon);

            // Ki·ªÉm tra ƒë√°p √°n ƒë√∫ng
            String checkQuery = "SELECT COUNT(*) FROM cautraloi WHERE macautraloi = ? AND ladapan = 1";
            int isCorrect = jdbcTemplate.queryForObject(checkQuery, Integer.class, dapAnChon);
            correctCount += isCorrect;
        }

        // T√≠nh ƒëi·ªÉm
        float diem = (10.0f / exam.getSoCau()) * correctCount;

        // C·∫≠p nh·∫≠t ketqua
        String updateKetQua = "UPDATE ketqua SET diem = ?, socaudung = ?, thoigianlambai = ? WHERE maketqua = ?";
        jdbcTemplate.update(updateKetQua, diem, correctCount, request.getTimeUsed(), result.getMaKetQua());
    }
}

