package com.nhom6.server.Services;

import com.nhom6.server.DTO.ResultDto;
import com.nhom6.server.DTO.SubmitExamRequest;
import com.nhom6.server.Model.ChiTietBaiThi;
import com.nhom6.server.Model.Exam;
import com.nhom6.server.Model.Result;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import java.util.*;
import java.util.concurrent.*;

@Service
public class ResultService {
    @Autowired
    private JdbcTemplate jdbcTemplate;
    @Autowired
    private ChiTietBaiThiService chiTietBaiThiService;
    @Autowired
    private  ExamService examService;

    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(10);
    private final ConcurrentHashMap<String, ScheduledFuture<?>> runningTimers = new ConcurrentHashMap<>();
    private String generateKey(String maKiThi, String id) {
        return maKiThi + "_" + id;
    }

    // B·∫Øt ƒë·∫ßu b√†i thi, t·∫°o b·ªô ƒë·∫øm ng∆∞·ª£c
    public void startExam(String maKiThi, String id, int durationMinutes) {
        String key = generateKey(maKiThi, id);
        // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ b·ªô ƒë·∫øm c≈© th√¨ kh√¥ng t·∫°o m·ªõi
        if (runningTimers.containsKey(key)) {
            return;
        }
        Runnable autoSubmitTask = () -> autoSubmitExam(maKiThi, id, durationMinutes);
        ScheduledFuture<?> scheduledTask = scheduler.schedule(autoSubmitTask, durationMinutes + 1 , TimeUnit.MINUTES);

        if (scheduledTask != null) {
            runningTimers.put(key, scheduledTask);
        }
    }

    // N·∫øu h·∫øt th·ªùi gian m√† ch∆∞a n·ªôp th√¨ t·ª± ƒë·ªông n·ªôp b√†i
    private void autoSubmitExam(String maKiThi, String id, int durationMinutes) {
        String key = generateKey(maKiThi, id);
        if (runningTimers.containsKey(key)) { // Ki·ªÉm tra n·∫øu c√≤n ƒë·∫øm ng∆∞·ª£c
            runningTimers.remove(key); // X√≥a b·ªô ƒë·∫øm ng∆∞·ª£c
            submitExam(new SubmitExamRequest(maKiThi, id, durationMinutes)); // G·ªçi h√†m n·ªôp b√†i
        }
    }

    public List<Result> getAllResults() {
        String sql = "SELECT * FROM ketqua";
        return jdbcTemplate.query(sql, new BeanPropertyRowMapper<>(Result.class));
    }

    public List<Result> getResultById(String maKiThi) {
        String sql = "SELECT * FROM ketqua WHERE maKiThi = ?";
        return jdbcTemplate.query(sql, new Object[]{maKiThi}, new BeanPropertyRowMapper<>(Result.class));
    }

    public List<ResultDto> getResultsWithUsers(String maKiThi, String maMonHoc) {
        String sql = "SELECT * FROM phanmon pm " +
                "JOIN nguoidung nd ON pm.id = nd.id " +
                "LEFT JOIN ketqua kq ON pm.id = kq.id AND kq.maKiThi = ? " +
                "WHERE pm.maMonHoc = ?";

        return jdbcTemplate.query(sql, new Object[]{maKiThi, maMonHoc}, (rs, rowNum) -> {
            ResultDto result = new ResultDto();
            result.setMaKetQua(rs.getString("maketqua"));
            result.setId(rs.getString("id"));
            result.setHoten(rs.getString("hoten"));
            result.setDiem(rs.getObject("diem") != null ? rs.getFloat("diem") : null);
            result.setThoiGianVaoThi(rs.getTimestamp("thoigianvaothi") != null
                    ? rs.getTimestamp("thoigianvaothi").toLocalDateTime()
                    : null);
            result.setThoiGianLamBai(rs.getObject("thoigianlambai") != null ? rs.getFloat("thoigianlambai") : null);
            return result;
        });
    }

    private String generateNextMaKetQua() {
        String sql = "SELECT TOP 1 maketqua FROM ketqua ORDER BY maketqua DESC";
        String lastMaKetQua = jdbcTemplate.queryForObject(sql, String.class);
        if (lastMaKetQua == null || lastMaKetQua.isEmpty()) {
            return "0000000001"; // N·∫øu ch∆∞a c√≥ m√£ n√†o, b·∫Øt ƒë·∫ßu t·ª´ 0000000001
        }
        // Chuy·ªÉn m√£ cu·ªëi th√†nh s·ªë r·ªìi tƒÉng l√™n
        long number = Long.parseLong(lastMaKetQua);
        number++;
        // Format l·∫°i th√†nh chu·ªói s·ªë 10 k√Ω t·ª±
        return String.format("%010d", number);
    }

    // L∆∞u k·∫øt qu·∫£ b√†i thi m·ªõi
    public String createResult(String maKiThi, String id) {
        String maKetQua = generateNextMaKetQua(); // T·∫°o m√£ k·∫øt qu·∫£
        String sql = """
            INSERT INTO ketqua (maketqua, makithi, id, diem, thoigianvaothi, thoigianlambai, socaudung)
            VALUES (?, ?, ?, null, GETDATE(), null, null)
        """;
        jdbcTemplate.update(sql, maKetQua, maKiThi, id);
        return maKetQua;
    }

    // Ki·ªÉm tra xem sinh vi√™n ƒë√£ c√≥ k·∫øt qu·∫£ ch∆∞a
    public Result checkKetQua(String maKiThi, String id) {
        String sql = "SELECT * FROM ketqua WHERE maKiThi = ? AND id = ?";
        try {
            return jdbcTemplate.queryForObject(sql, new Object[]{maKiThi, id}, new BeanPropertyRowMapper<>(Result.class));
        } catch (EmptyResultDataAccessException e) {
            // Kh√¥ng c√≥ k·∫øt qu·∫£, tr·∫£ v·ªÅ null
            return null;
        }
    }


    public List<ChiTietBaiThi> createExamResult(String maKiThi, String id) {
        // üîç Ki·ªÉm tra k·ª≥ thi c√≥ t·ªìn t·∫°i kh√¥ng
        Exam kiThi = examService.getExamByMa(maKiThi);

        // üîç Ki·ªÉm tra xem sinh vi√™n ƒë√£ c√≥ k·∫øt qu·∫£ thi ch∆∞a
        Result existingKetQua = this.checkKetQua(kiThi.getMaKiThi(), id);
        String maKetQua = existingKetQua == null ? this.createResult(maKiThi, id) : existingKetQua.getMaKetQua();
        List<String> existingCauHoiIds = chiTietBaiThiService.checkCauHoi(maKetQua);
        List<Map<String, Object>> cauHoiList;

        if (!existingCauHoiIds.isEmpty()) {
            // N·∫øu ƒë√£ c√≥, l·∫•y l·∫°i t·ª´ b·∫£ng `cauhoi`
            String placeholders = String.join(",", Collections.nCopies(existingCauHoiIds.size(), "?"));
            String selectCauHoiSql = "SELECT * FROM cauhoi WHERE maCauHoi IN (" + placeholders + ")";
            cauHoiList = jdbcTemplate.queryForList(selectCauHoiSql, existingCauHoiIds.toArray());
        } else {
            // N·∫øu ch∆∞a c√≥, l·∫•y ng·∫´u nhi√™n theo m√¥n h·ªçc
            cauHoiList = chiTietBaiThiService.randomCauHoi(maKetQua, kiThi.getMaMonHoc(), kiThi.getSoCau());
        }
        return chiTietBaiThiService.getCauHoi(cauHoiList, maKetQua);
    }

    public void submitExam(SubmitExamRequest request) {
        if (runningTimers.containsKey(request.getId())) {
            runningTimers.get(request.getId()).cancel(false); // H·ªßy b·ªô ƒë·∫øm ng∆∞·ª£c
            runningTimers.remove(request.getId()); // X√≥a kh·ªèi danh s√°ch
        }
        // Ki·ªÉm tra
        Result result = checkKetQua(request.getMaKiThi(), request.getId());
        if (result == null) {
            throw new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ thi.");
        }

        Exam exam = examService.getExamByMa(request.getMaKiThi());

        // L·∫•y danh s√°ch ƒë√°p √°n ƒë√£ ch·ªçn t·ª´ b·∫£ng chitietde
        String selectQuery = "SELECT macauhoi, dapanchon FROM chitietde WHERE maketqua = ?";
        List<Map<String, Object>> answers = jdbcTemplate.queryForList(selectQuery, result.getMaKetQua());

        int correctCount = 0;

        for (Map<String, Object> answer : answers) {
            String macauhoi = (String) answer.get("macauhoi");
            String dapAnChon = (String) answer.get("dapanchon");

            if (dapAnChon == null || dapAnChon.isEmpty()) continue;

            // Ki·ªÉm tra ƒë√°p √°n ƒë√∫ng
            String checkQuery = "SELECT COUNT(*) FROM cautraloi WHERE macautraloi = ? AND ladapan = 1";
            int isCorrect = jdbcTemplate.queryForObject(checkQuery, Integer.class, dapAnChon);
            correctCount += isCorrect;
        }

        // T√≠nh ƒëi·ªÉm
        float diem = (10.0f / exam.getSoCau()) * correctCount;

        // C·∫≠p nh·∫≠t b·∫£ng ketqua
        String updateKetQua = "UPDATE ketqua SET diem = ?, socaudung = ?, thoigianlambai = ? WHERE maketqua = ?";
        jdbcTemplate.update(updateKetQua, diem, correctCount, request.getTimeUsed(), result.getMaKetQua());
    }

}

